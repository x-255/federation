// Generated by dts-bundle v0.7.3

declare module 'remote_app' {
  export * from 'remote_app/RButton';
  export * from 'remote_app/Rtest';
  export * from 'remote_app/Adder';
}

declare module 'remote_app/RButton' {
  const _sfc_main: import("vue").DefineComponent<{
    round: {
      type: BooleanConstructor;
      required: false;
    };
  }, {
    props: {
      round?: boolean | undefined;
    };
    ElButton: import("element-plus/es/utils").SFCWithInstall<import("vue").DefineComponent<{
      readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
      readonly disabled: BooleanConstructor;
      readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
      readonly icon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
      readonly nativeType: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "button", unknown, "button" | "submit" | "reset", unknown>;
      readonly loading: BooleanConstructor;
      readonly loadingIcon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, () => import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>, unknown, unknown, unknown>;
      readonly plain: BooleanConstructor;
      readonly autofocus: BooleanConstructor;
      readonly round: BooleanConstructor;
      readonly circle: BooleanConstructor;
      readonly color: StringConstructor;
      readonly autoInsertSpace: import("element-plus/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
    }, {
      props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
        readonly disabled: BooleanConstructor;
        readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
        readonly icon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
        readonly nativeType: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "button", unknown, "button" | "submit" | "reset", unknown>;
        readonly loading: BooleanConstructor;
        readonly loadingIcon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, () => import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>, unknown, unknown, unknown>;
        readonly plain: BooleanConstructor;
        readonly autofocus: BooleanConstructor;
        readonly round: BooleanConstructor;
        readonly circle: BooleanConstructor;
        readonly color: StringConstructor;
        readonly autoInsertSpace: import("element-plus/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
      }>> & {
        onClick?: ((evt: MouseEvent) => any) | undefined;
      }>>;
      emit: (event: "click", evt: MouseEvent) => void;
      slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
      }>;
      buttonGroupContext: import("element-plus").ButtonGroupContext | undefined;
      globalConfig: import("vue").Ref<import("element-plus").ButtonConfigContext | undefined>;
      ns: {
        namespace: import("vue").ComputedRef<string>;
        b: (blockSuffix?: string | undefined) => string;
        e: (element?: string | undefined) => string;
        m: (modifier?: string | undefined) => string;
        be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
        em: (element?: string | undefined, modifier?: string | undefined) => string;
        bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
        bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
        is: {
          (name: string, state: boolean | undefined): string;
          (name: string): string;
        };
      };
      form: import("element-plus").ElFormContext | undefined;
      _size: import("vue").ComputedRef<"small" | "default" | "large">;
      _disabled: import("vue").ComputedRef<boolean>;
      _ref: import("vue").Ref<HTMLButtonElement | undefined>;
      _type: import("vue").ComputedRef<"" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text">;
      autoInsertSpace: import("vue").ComputedRef<import("element-plus/es/utils").BuildPropType<BooleanConstructor, unknown, unknown>>;
      shouldAddSpace: import("vue").ComputedRef<boolean>;
      buttonStyle: import("vue").ComputedRef<Record<string, string>>;
      handleClick: (evt: MouseEvent) => void;
      ElIcon: import("element-plus/es/utils").SFCWithInstall<import("vue").DefineComponent<{
        readonly size: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | number>, unknown, unknown, unknown, unknown>;
        readonly color: import("element-plus/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
      }, {
        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
          readonly size: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | number>, unknown, unknown, unknown, unknown>;
          readonly color: import("element-plus/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
        }>> & {
          [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        ns: {
          namespace: import("vue").ComputedRef<string>;
          b: (blockSuffix?: string | undefined) => string;
          e: (element?: string | undefined) => string;
          m: (modifier?: string | undefined) => string;
          be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
          em: (element?: string | undefined, modifier?: string | undefined) => string;
          bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
          bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
          is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
          };
        };
        style: import("vue").ComputedRef<import("vue").CSSProperties>;
      }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly size: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | number>, unknown, unknown, unknown, unknown>;
        readonly color: import("element-plus/es/utils").BuildPropReturn<StringConstructor, unknown, unknown, unknown, unknown>;
      }>>, {
        size: import("element-plus/es/utils").BuildPropType<import("element-plus/es/utils").PropWrapper<string | number>, unknown, unknown>;
        color: string;
      }>> & Record<string, any>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
      click: (evt: MouseEvent) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
      readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
      readonly disabled: BooleanConstructor;
      readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
      readonly icon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, "", unknown, unknown, unknown>;
      readonly nativeType: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "button", unknown, "button" | "submit" | "reset", unknown>;
      readonly loading: BooleanConstructor;
      readonly loadingIcon: import("element-plus/es/utils").BuildPropReturn<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, () => import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>, unknown, unknown, unknown>;
      readonly plain: BooleanConstructor;
      readonly autofocus: BooleanConstructor;
      readonly round: BooleanConstructor;
      readonly circle: BooleanConstructor;
      readonly color: StringConstructor;
      readonly autoInsertSpace: import("element-plus/es/utils").BuildPropReturn<BooleanConstructor, undefined, unknown, unknown, unknown>;
    }>> & {
      onClick?: ((evt: MouseEvent) => any) | undefined;
    }, {
      type: import("element-plus/es/utils").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
      icon: import("element-plus/es/utils").BuildPropType<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
      nativeType: import("element-plus/es/utils").BuildPropType<StringConstructor, "button" | "submit" | "reset", unknown>;
      loadingIcon: import("element-plus/es/utils").BuildPropType<import("element-plus/es/utils").PropWrapper<string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions>>, unknown, unknown>;
      autoInsertSpace: import("element-plus/es/utils").BuildPropType<BooleanConstructor, unknown, unknown>;
      size: import("element-plus/es/utils").BuildPropType<StringConstructor, "small" | "default" | "large", never>;
      disabled: boolean;
      loading: boolean;
      plain: boolean;
      autofocus: boolean;
      round: boolean;
      circle: boolean;
    }>> & {
      ButtonGroup: import("vue").DefineComponent<{
        readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
        readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
      }, {
        props: Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
          readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
          readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
        }>> & {
          [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        ns: {
          namespace: import("vue").ComputedRef<string>;
          b: (blockSuffix?: string | undefined) => string;
          e: (element?: string | undefined) => string;
          m: (modifier?: string | undefined) => string;
          be: (blockSuffix?: string | undefined, element?: string | undefined) => string;
          em: (element?: string | undefined, modifier?: string | undefined) => string;
          bm: (blockSuffix?: string | undefined, modifier?: string | undefined) => string;
          bem: (blockSuffix?: string | undefined, element?: string | undefined, modifier?: string | undefined) => string;
          is: {
            (name: string, state: boolean | undefined): string;
            (name: string): string;
          };
        };
      }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        readonly size: import("element-plus/es/utils").BuildPropReturn<StringConstructor, never, false, "small" | "default" | "large", never>;
        readonly type: import("element-plus/es/utils").BuildPropReturn<StringConstructor, "", unknown, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
      }>>, {
        type: import("element-plus/es/utils").BuildPropType<StringConstructor, "" | "default" | "primary" | "success" | "warning" | "info" | "danger" | "text", unknown>;
        size: import("element-plus/es/utils").BuildPropType<StringConstructor, "small" | "default" | "large", never>;
      }>;
    };
  }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    round: {
      type: BooleanConstructor;
      required: false;
    };
  }>>, {
    round: boolean;
  }>;
  export default _sfc_main;
}

declare module 'remote_app/Rtest' {
  const _default: {
    name: string;
  };
  export default _default;
}

declare module 'remote_app/Adder' {
  const _sfc_main: import("vue").DefineComponent<{}, {
    count: import("vue").Ref<number>;
    emit: (event: "add", vaule: number) => void;
    add: () => void;
    dec: () => void;
  }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    add: (vaule: number) => true;
  }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>> & {
    onAdd?: ((vaule: number) => any) | undefined;
  }, {}>;
  export default _sfc_main;
}

